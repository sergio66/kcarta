
Date: Fri, 21 Dec 2012 13:37:53 -0500
From: "Howard E. Motteler" <motteler@gmail.com>
To: strow@umbc.edu
Subject: kcmix2 notes


Larrabee,

Here is quick overview of kcmix2.  The code I have is ten years old.
There are a few comments but no proper docs, it was work in progress
that I never got back to.  It worked OK on the tests I ran, mainly
comparisons with the then-current kcarta and klayers.  The last time
I ran it was early 2006 for CrIS gas cell tests, but we needed GENLN
for the low pressure detail.

I was dissapointed I never go to turn this into a proper package 
but I was always more interested in the internal workings than the
practical aspects.  The i/o did evolve into RTP, which was useful.

I think kcmix100 is similar to Scott or Sergio's later "fast"
version--it's only slightly faster, and then only if you don't also
need to run klayers.


top level routines
-------------------

kcrad - radiative transfer top-level wrapper, manages defaults and
        loops on chunks, calling kcmix2, contcalc, and rtchunk

rtchunk - radiative transfer calc's in 10^4 point chunks, including
          reflected solar and basic reflected thermal

kcmix2 - calculates 25 1/cm chunks of mixed absorptions for a
         supplied profile, from tabulated compressed absorptions

kcmix100 - version of kcmix that assumes a 100-layer input profile
           with the same layers as the reference profiles

contcalc - continuum calculation from kcarta tabulated values


some test routines
-------------------

ktest3 - compare kcmix and kcmix100 at varying layer sets

ktest5 - compare 100 layer single gas absorptions from kcmix and the
         new kcarta (v 1.07)

ktest6 - compare 100 layer single gas absorptions from kcmix, the new
         kcarta (v 1.07), and sergio's lbl code

ktest7 - test kcmix constituent amount and partial pressure calculations
  %                                                  p1
  %  GENLN level prof  -->  pt2kcmix (old klayers)  ----.
  %       |                                             |
  %       V                                        p2   V
  %   gpro2rtp --> RTP klayers --> unit conversion --> compare

ktest8 - test kcmix with old and new klayers
  %                                              p1
  %  GENLN level prof --> pt2kcmix (old klayers) --> kcmix ----.
  %       |                                                    |
  %       V                                   p2               V
  %   gpro2rtp --> RTP klayers --> unit conv. --> kcmix --> compare

ktest9 - basic kcrad tests

ktest10 - demo of a call to kcrad followed by a convolution


-- 
Howard E. Motteler 
motteler@gmail.com


Date: Sat, 22 Dec 2012 15:46:18 -0500
From: "Howard E. Motteler" <motteler@gmail.com>
To: strow@umbc.edu
Subject: more on kcmix2


Larrabee,

The key idea in kcmix is that the profile should define the set of
mixed paths.  So we interpolate from tabulated coefficients to the
layers the profile defines, and for radiance calcs do the integral
over those layers.  

This gives a 3-d interpolation in pressure, temperature, and partial
pressure.  In kcmix2.m I do this with a single linear interpolation.
The performace for building the mixed paths this way was good, about
the same as the then-current fortran version of kcarta.

We had some concerns about linear vs spline interpolation, I think
kcarta was doing a spline.  Comparing kcmix and kcarta absorptions
showed some differences, so I did a 3-way comparison of kcmix,
kcarta, and Sergio's line-by-line code, in ktest7.  As I recall this
didn't show any significant advantage for kcarta vs kcmix, but Scott
still preferred to stick with kcarta for fast model generation, for
consistency and safety.

The radiative transfer calc's are from Sergio and Scott's notes and
do upwelling radiances with reflected solar, basic reflected thermal,
and continuum.  As I recall the continuum calc was particularly slow.


Howard

-- 
Howard E. Motteler 
motteler@gmail.com


5 Apr 2005 mail to nick.nalli
------------------------------

I do have a Matlab version of kcarta, which I call "kcmix".

This is not a rewrite of kcarta but my own version, written from
scratch.  It does the interpolations in pressure and temperature
a little more elegantly than kcarta and is not constrained to any
particular level set.  The uncompression and interpolation of the
tabulated optical depths is highly vectorized and about as fast as
the Fortran kcarta, while the radiance calculations, which require
an explicit loop over levels, is only a little slower.  It is much
much simpler than the Fortran kcarta but doesn't have a lot of the
features, e.g., no scattering code.

This evolved out of the code that I use for testing and validation,
when I build the compressed database.  I mostly use Sergio's Matlab
line-by-line code for that, along with my own cross-section code,
and spot check things against GENLN2.

Unfortunately there is zero documentation and I never bundled any
of this up into a proper package.  And it's been a few years since
I looked at it.  But maybe I could go over it again and make you
a "beta" release.


10 Jun 2004 mail to strow
--------------------------

Here are some thoughts on organizing kcmix and related routines,
from an email message I sent a couple of weeks ago.  Since then
I think Scott has been working on his own version of the mixing
code for fast model generation.

I wrote the core part of the code, kcmix, about four years ago,
and the demo radiative transfer code a couple of years after that,
so I am a little rusty on the details, but this is an overview.
The original motivation for kcmix was that since I was doing the
compressions, I should also do the uncompressions, at least as a
test.

The last thing I was working on was some tests comparing kcmix
with the fortran kcarta, for basic radiance calculations.  This
gave good agreement with the surface fixed at an AIRS level, but
since the kcmix radiance code doesn't do interpolation, I needed
a version of klayers with variable layering to interpolate the
surface between fixed pressure levels.

I wrote a matlab wrapper for klayers that reinterpolates its
output, and a basic interpolation code similar to klayers but
much simpler.  That worked OK for some tests but was nothing
you'd want to rely on too much.  This was as far as I got the
last time I worked on things.

More recently, Sergio added a more refined reflected thermal
calculation to my demo radiance calculation, added his chi
function hack to the uncompression code, and added a ton of
print statements.  He also made a sort of package, but it was
just a tar file of a snapshot of the code and didn't have any
documentation at all.

As far as performance goes, the kcmix uncompression and basic
radiance calc's are very close to the kcarta fortran times.  The
current matlab continuum calculation is fine for experiments but
is pretty slow; it would be much faster to treat the continuum
versions like separate constituents.

For making fast models, we don't need variable layering or a
matlab klayers; the main things we need are breakouts done with
RTP files (and maybe some added kcmix parameters) and a kcmix
unchunker.  The main steps (before the actual fitting) are

  RTP breakouts -> kcmix -> unchunker -> sconv (or Fourier conv)

sconv and the Fourier convolution routines are what we are already
using, and kcmix is done, so the missing pieces are the unchunker
and RTP breakouts.  We might also want to make some modifications
or extensions of the kcmix options to help in doing breakouts, if
we want to do things the way kcarta does now.

So here are the main things to do, for making fast models with
kcmix, and also for a more general matlab kcarta.

 1.  Finish the unchunker.  I should probably do that, since I did
     it for kcarta and have a test version for kcmix; I just never
     finished it because I was focused on radiance calculations at
     the time.

 2.  Make RTP versions of the fast model breakouts.  I talked
     with Scott quite a bit about this, a while back, and have a
     bunch of notes, but it has been some time since I looked at
     this.  It may be that we can do this better by adding some
     features to kcmix to work more like the current kcarta, but
     we should probably talk about that.

 3.  Think about how to organize versions of the kcarta database,
     keep it paired with the proper reference profiles and other
     components, etc.  Maybe the version scheme we have now is OK
     for this, if some of the other data is also bundled in.

For more general radiance calculations and other applications, I
think the main thing is to organize the code in a way that it is
easy to put different radiance calculation functions on top of the
mixing code.  Initially I had one big procedure for both upwelling
and downwelling cases, but now I think it makes more sense to set
things up for a whole family of radiance calculation functions.

The main things we need for that are a klayers (or maybe a
family of klayers type progams for up and downlooking cases?)
with variable output layers, and at some point more efficient
continuum code.

The advantages of the kcmix package are simplicity, the variable
layering and also that although it uses 10,000 point chunks, it
is not tied to any particular frequency scale.  A while back we
looked into using a set of different frequency grids rather than
the single .0025 scale, but we never followed up on that.

(I think Sergio added variable layering to kcarta--I believe he
added the interpolation scheme I was using as an option--and he
can probably also take different frequency grids, maybe with a
little further hacking.)


3 Nov 2000 mail to strow
-------------------------

As far as the new mixing code goes, it is still a prototype, with
some assumptions about chunking and the coefficent tabulation that
should not be hard-coded.  It is good enough now that I could use
it for for production of convolved transmittances.  The current
version is ~motteler/abscmp/kcmix/kcmix.m .

I am reluctant to give it out yet, as there are a bunch of
associated tools and wrappers to read GENLN point profiles, call
klayers, etc., that are needed to do anything useful, and not all
these parts are ready to be bundled together as a proper release;
also many of these pieces won't be needed when we get the new
formats better sorted out.  kcmix uses matlab structures for the
input and reference profiles, which are more or less the same as the
arguments for the RPT reader and writer.  (The matchup is not exact
right now, since I wrote kcmix before working on the new formats.)


24 Aug 2000 mail to pvandelst
------------------------------

I have a prototype radiative transfer code in matlab that does
mixing and a basic RTE for arbitrary profiles, working off the
compressed database.  It was partly indended as a starting
point for further experiments with algorithm development, and
partly as a demo that generating mixed absorption coeff's and
doing basic radiative transfer doesn't need to be nearly as
baroque as it's gotten to be with Sergio's code, which, to be
fair, inherited most of its user interface and data formats
from GENLN2.  

Unlike the existing code, it works with an arbitrary set of
layers, but doesn't have reflected thermal or solar, and it
doesn't add in the water continuum.  Most of this, and also
Jacobians and the ability to work at an arbitrary frequency
grid, would not be too hard to add, but I have been getting
bogged down with profile conversions and HDF details lately,
and haven't had time to get back to it.  I'll append the
matlab "help" preface from the current mixing code, if you
want to get a bit better idea of what I've done so far.

